<?php

/**
 * Variable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    elicitor
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Variable extends BaseVariable {

    public function hasCategoricalResults() {
        $res = false;
        foreach($this->getCategoricalResults() as $categorical_results) {
            if($categorical_results->getProgress() == 100) {
                return true;
            }
        }
        return $res;
    }

	public function getResultId($expert_id) {
		if($this->getVariableType() == "Continuous") {
			$res = Doctrine::getTable('ContinuousElicitation')->findByExpertAndTask($expert_id, $this->getId());
			return $res->getId();
		} elseif($this->getVariableType() == 'Categorical') {
			$res = Doctrine::getTable('CategoricalElicitation')->findByExpertAndTask($expert_id,  $this->getId());
			return $res->getId();
		} else {
                        $res = Doctrine::getTable('SpatialElicitation')->findByExpertAndTask($expert_id, $this->getId());
                }
	}

	public function getReason($expert_id) {
		if($this->getVariableType() == "Continuous") {
			$res = Doctrine::getTable('ContinuousElicitation')->findByExpertAndTask($expert_id, $this->getId());
			if($res == null) return false;
			return $res->getReason();
		} else {
			$res = Doctrine::getTable('CategoricalElicitation')->findByExpertAndTask($expert_id,  $this->getId());
			if($res == null) return false;
			return $res->getReason();
		}
	}

	public function getOptOut($expert_id) {
		if($this->getVariableType() == "Continuous") {
			$res = Doctrine::getTable('ContinuousElicitation')->findByExpertAndTask($expert_id, $this->getId());
			if($res == null) {
				return false;
			}
			return $res->getOptOut();
		} else {
			$res = Doctrine::getTable('CategoricalElicitation')->findByExpertAndTask($expert_id,  $this->getId());
			if($res == null) return false;
			return $res->getOptOut();
		}
	}

    public function getCombinedCategoricalResults() {
        $results = array();
        $expert_probabilities = array();
        // Get every experts results (count)
        foreach($this->getCategoricalResults() as $categorical_results) {
			if( ! $categorical_results->getEnabled() || $categorical_results->getOptOut()) continue;
            $res = json_decode($categorical_results->getResults());
            if($res == null) {
                // no results
                continue;
            }

            // calculate the total beans for this expert
            $total_beans = 0;
            foreach($res as $category => $value) {
                if($category == '_empty_') {
                    // skip empty properties
                    continue;
                }
                $total_beans += $value;
            }

            // convert from counts to probabilities and add to results array
            foreach($res as $category => $value) {
                if($category == '_empty_') {
                    // skip empty properties
                    continue;
                }

                if(!isset($results[$category])) {
                    $results[$category] = 0;
                }

                $results[$category] += $value / $total_beans;
            }

            // re-weight the results by number of experts
            foreach($results as $result) {
                $result = $result / $this->getCategoricalResults()->count();
            }
        }
        return $results;
    }

    public function getExpertProgress($expert_id) {
        // Get the results
        $results = $this->getResults();
        if($results->count() == 0) {
            $results = $this->getCategoricalResults();
        }
        $total = 0;
        foreach ($results as $result) {
            if ($result->getExpert()->getId() == $expert_id) {
                $total += $result->getProgress();
            }
        }

        return $total;
    }

    public function getProgress() {
        // Get the results
        $results = $this->getResults();
        if($results == null || empty($results) || $results->count() == 0) {
            $results = $this->getCategoricalResults();
        }
        $total = 0;
        foreach ($results as $result) {
            $progress = $result->getProgress();
            if ($progress > 0) {
                $total += $progress;
            }
        }

        if ($total > 0) {
            return round($total / sizeof($results));
        } else {
            return 0;
        }
    }

    public function getCompletedExperts($include_opt_outs = true) {
        $experts = $this->Experts;
        $completed_experts = array();
        foreach ($experts as $expert) {
            if ($expert->getTaskProgress($this->getId()) == 100) {
                $completed_experts[] = $expert;
            } elseif($include_opt_outs && $this->getOptOut($expert->getId())) {
				$completed_experts[] = $expert;
			}

        }

        return $completed_experts;
    }

    public function hasBriefingDocument() {
        if ($this->getResearchObjective()) {
            return true;
        }
        if ($this->getOutline()) {
            return true;
        }
        if ($this->getVariableCharacteristics()) {
            return true;
        }
        if ($this->getElicitationTechniques()) {
            return true;
        }
        if ($this->getDefinitions()) {
            return true;
        }
        if ($this->getRequirements()) {
            return true;
        }
        if ($this->getBiasCauses()) {
            return true;
        }
        if ($this->getRecommendedLiterature()) {
            return true;
        }
        return false;
    }

    public function preUpdate($record) {
        $modified = $this->getModified();
        $obj = $record->getInvoker();
        if (isset($modified['variable_type'])) {
            // changed the variable type
            //$old_type = ($modified['variable_type'] == 'Categorical') ? 'Continuous' : 'Categorical';
            $old_type = $modified['variable_type'] . 'Elicitation';


            // remove existing elicitation results
            $q = Doctrine::getTable($old_type)->findByVariableId($obj->getId());
            foreach ($q as $e) {
                $e->delete();
            }

            // add new elicitation results
            foreach ($obj->getExperts() as $expert) {
                $new_type = $this->variable_type . 'Elicitation';
                $eobj = new $new_type();
                $eobj->setExpertId($expert->getId());
                $eobj->setVariableId($obj->getId());
                $eobj->save();
            }
        }
    }

}